// === –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML ===
function escapeHtml(text) {
  if (!text) return '';
  return text
    .toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

// === –ú–∞–ø–ø–∏–Ω–≥ –°–¢–ê–†–´–• form_id ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ===
const FORM_NAMES = {
  4149632865255513: 'geptrafit',
  2197383904095104: 'venofit',
  2077372786002091: 'diafit acc',
  2006596446846389: 'silamax',
  1238732341637419: 'stop-artroz',
  1311527377012639: 'superpamyat',
};

// === –ú–∞–ø–ø–∏–Ω–≥ –ù–û–í–´–• form_id ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ===
const NEW_FORM_NAMES = {
  1106929934547964: 'Venofit',
  1522683212077748: 'Geptrafit',
  25156805657278145: 'Diafit ACC',
  657507350520152: 'Stopartroz',
  1118745887100923: 'Silamax',
  1503515184304874: 'Superpamyat',
};

// === ID –ù–æ–≤–æ–≥–æ Telegram —á–∞—Ç–∞ ===
const NEW_CHAT_ID = '-1003102429452';

// === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ===
async function sendTelegramMessage(chatId, messageText) {
  const TOKEN = process.env.TELEGRAM_BOT_TOKEN;

  if (!TOKEN || !chatId) {
    console.error('Telegram TOKEN or CHAT_ID is missing.');
    return { ok: false, description: 'Server configuration error.' };
  }

  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: messageText,
        parse_mode: 'html',
      }),
    });

    const data = await response.json();
    if (!data.ok) {
      console.error(
        `Telegram API Error (ChatID: ${chatId}):`,
        data.description
      );
    }
    return data;
  } catch (error) {
    console.error(
      `Failed to send message to Telegram (ChatID: ${chatId}):`,
      error
    ); // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Promise.allSettled –º–æ–≥ –µ–µ –ø–æ–π–º–∞—Ç—å
    throw error;
  }
}

// === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
export default async function handler(request, response) {
  response.setHeader('Access-Control-Allow-Credentials', true);
  response.setHeader('Access-Control-Allow-Origin', '*');
  response.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  response.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (request.method === 'OPTIONS') {
    return response.status(200).end();
  } // === –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Webhook Meta ===

  if (request.method === 'GET') {
    const mode = request.query['hub.mode'];
    const token = request.query['hub.verify_token'];
    const challenge = request.query['hub.challenge'];

    if (mode === 'subscribe' && token === process.env.META_VERIFY_TOKEN) {
      console.log('Webhook verified successfully!');
      return response.status(200).send(challenge);
    } else {
      console.error('Webhook verification failed.');
      return response.status(403).json({ message: 'Verification failed' });
    }
  } // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö POST-–∑–∞—è–≤–æ–∫ ===

  if (request.method === 'POST') {
    console.log('=== RAW BODY ===', JSON.stringify(request.body, null, 2));
    const body = request.body;
    const OLD_CHAT_ID = process.env.TELEGRAM_CHAT_ID; // ID —Å—Ç–∞—Ä–æ–≥–æ —á–∞—Ç–∞

    try {
      // === –ï—Å–ª–∏ —ç—Ç–æ –ª–∏–¥ —Å Meta (Facebook/Instagram) ===
      if (body.object === 'page') {
        const entry = body.entry?.[0];
        const change = entry?.changes?.[0];
        const leadgenId = change?.value?.leadgen_id;
        const formId = change?.value?.form_id;

        if (!leadgenId) {
          console.error('No leadgen_id in webhook payload.');
          return response.status(400).json({ message: 'leadgen_id missing' });
        }

        // === –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ Graph API ===
        const token = process.env.META_PAGE_ACCESS_TOKEN;
        const leadResponse = await fetch(
          `https://graph.facebook.com/v23.0/${leadgenId}?access_token=${token}`
        );
        const leadJson = await leadResponse.json();
        console.log('=== LEAD DATA FROM GRAPH API ===', leadJson);

        const leadData = leadJson.field_data || [];
        const findField = (fieldName) =>
          leadData.find((f) => f.name === fieldName)?.values?.[0] ||
          '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'; // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π (—É–∑–±.) --- // –ò–º—è

        let name = findField('full_name');
        if (name === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
          name = findField('–∏—Å–º–∏–Ω–≥–∏–∑?'); // –ü–æ–∏—Å–∫ –ø–æ —É–∑–±–µ–∫—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
        }
        const firstName = findField('first_name');
        const lastName = findField('last_name');
        if (
          name === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' &&
          (firstName !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' || lastName !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        ) {
          name = `${firstName} ${lastName}`.trim();
        }

        // –¢–µ–ª–µ—Ñ–æ–Ω—ã
        let phoneMain = findField('phone_number');
        if (phoneMain === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
          phoneMain = findField('—Ç–µ–ª–µ—Ñ–æ–Ω_—Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑?'); // –ü–æ–∏—Å–∫ –ø–æ —É–∑–±–µ–∫—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
        }
        const phoneExtra = findField(
          'biz_sizga_telefon_qilishimiz_uchun,_raqamingizni_qoldiring.'
        );
        const phoneUzbek = findField('—Ç–µ–ª–µ—Ñ–æ–Ω_—Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑?'); // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º —ç—Ç–æ –ø–æ–ª–µ // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø 1 --- // === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ —Ñ–ª–∞–≥ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã ===
        let productName;
        let isNewForm = false; // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ú–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã ---

        if (FORM_NAMES[formId]) {
          productName = FORM_NAMES[formId];
          isNewForm = false; // –≠—Ç–æ —Å—Ç–∞—Ä–∞—è —Ñ–æ—Ä–º–∞
        } else {
          isNewForm = true;
          productName = NEW_FORM_NAMES[formId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç';
        } // === –ì–æ—Ç–æ–≤–∏–º –±–∞–∑–æ–≤—ã–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø 2 ---

        const namePart = `<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${escapeHtml(name)}\n`;
        const phoneMainPart = `<b>üìû –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä:</b> ${escapeHtml(
          phoneMain
        )}\n`;
        let phoneExtraPart = ''; // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–ª—É—á—à–∞–µ–º –ª–æ–≥–∏–∫—É –¥–æ–ø. –Ω–æ–º–µ—Ä–∞ ---

        if (
          phoneExtra &&
          phoneExtra !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' &&
          phoneExtra !== phoneMain
        ) {
          phoneExtraPart = `<b>üìû –î–æ–ø. –Ω–æ–º–µ—Ä:</b> ${escapeHtml(phoneExtra)}\n`;
        } else if (
          phoneUzbek &&
          phoneUzbek !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' &&
          phoneUzbek !== phoneMain
        ) {
          phoneExtraPart = `<b>üìû –î–æ–ø. –Ω–æ–º–µ—Ä:</b> ${escapeHtml(phoneUzbek)}\n`;
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø 3 ---

        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---

        // –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ "–æ–±–µ—â–∞–Ω–∏–π" (promises) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendPromises = []; // 1. –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¢–ê–†–û–ì–û —á–∞—Ç–∞

        const sourceForOldChat = `Meta Lead Ad (${
          isNewForm ? '*' : ''
        }${productName}${isNewForm ? '*' : ''}, Form ID: ${formId})`;
        const messageForOldChat =
          `<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n` +
          `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(sourceForOldChat)}\n` +
          namePart +
          phoneMainPart +
          phoneExtraPart;

        // –î–æ–±–∞–≤–ª—è–µ–º promise –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —á–∞—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
        sendPromises.push(sendTelegramMessage(OLD_CHAT_ID, messageForOldChat)); // 2. –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ù–û–í–û–ì–û —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–æ–≤–∞—è)

        if (isNewForm) {
          const sourceForNewChat = `Meta Lead Ad (${productName}, Form ID: ${formId})`; // –ë–µ–∑ –∑–≤–µ–∑–¥—ã
          const messageForNewChat =
            `<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n` +
            `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(sourceForNewChat)}\n` +
            namePart +
            phoneMainPart +
            phoneExtraPart;

          // –î–æ–±–∞–≤–ª—è–µ–º promise –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
          sendPromises.push(
            sendTelegramMessage(NEW_CHAT_ID, messageForNewChat)
          );
        }

        // –ñ–î–ï–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –í–°–ï–• –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const results = await Promise.allSettled(sendPromises);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–∞–º –≤–∞–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ü–ï–†–í–û–ô –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Å—Ç–∞—Ä—ã–π —á–∞—Ç)
        // results[0] - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –°–¢–ê–†–´–ô —á–∞—Ç.

        let telegramResult1;
        if (results[0].status === 'fulfilled') {
          telegramResult1 = results[0].value; // { ok: true, ... } –∏–ª–∏ { ok: false, ... }
        } else {
          // –≠—Ç–æ –µ—Å–ª–∏ sendTelegramMessage –≤—ã–±—Ä–æ—Å–∏–ª–∞ –æ—à–∏–±–∫—É (–Ω–∞—à catch error)
          console.error(
            'Failed to send message to OLD chat (Promise rejected):',
            results[0].reason
          );
          telegramResult1 = {
            ok: false,
            description: results[0].reason?.message || 'Failed to send',
          };
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ù–û–í–´–ô —á–∞—Ç –Ω–µ —É–¥–∞–ª–∞—Å—å (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
        if (isNewForm && results[1]) {
          if (results[1].status === 'rejected') {
            console.error(
              'Failed to send message to NEW chat (Promise rejected):',
              results[1].reason
            );
          } else if (!results[1].value.ok) {
            console.error(
              'Telegram API Error (NEW Chat):',
              results[1].value.description
            );
          }
        } // –û—Ç–≤–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É Meta –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ *–ø–µ—Ä–≤–æ–π* –æ—Ç–ø—Ä–∞–≤–∫–∏

        if (telegramResult1.ok) {
          return response
            .status(200)
            .json({ message: 'Meta lead processed successfully!' });
        } else {
          return response
            .status(500)
            .json({ message: 'Failed to send Meta lead to main Telegram.' });
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø 4 ---
      } else {
        // === –û–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –°–¢–ê–†–´–ô —á–∞—Ç) ===
        const { name, phone, productName } = body;
        if (!name || !phone) {
          return response
            .status(400)
            .json({ message: 'Name and phone are required.' });
        }

        const source = productName || '–õ–µ–Ω–¥–∏–Ω–≥';
        let message = `<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n`;
        message += `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(source)}\n`;
        message += `<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${escapeHtml(name)}\n`;
        message += `<b>üìû –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä:</b> ${escapeHtml(phone)}\n`;

        const telegramResult = await sendTelegramMessage(OLD_CHAT_ID, message);

        if (telegramResult.ok) {
          return response
            .status(200)
            .json({ message: 'Landing page lead processed successfully!' });
        } else {
          return response
            .status(500)
            .json({ message: 'Failed to send landing page lead to Telegram.' });
        }
      }
    } catch (error) {
      console.error('Error processing POST request:', error);
      return response.status(500).json({ message: 'Internal Server Error.' });
    }
  }

  return response
    .status(405)
    .json({ message: `Method ${request.method} Not Allowed` });
}
