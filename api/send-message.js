async function sendTelegramMessage(name, phone, source) {
  const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

  if (!TOKEN || !CHAT_ID) {
    console.error('Telegram TOKEN or CHAT_ID is not configured.');
    // throw new Error("Server configuration error: Telegram secrets are missing.");
    return { ok: false, description: 'Server configuration error.' };
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = `<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n`;
  message += `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n`; // –£–∫–∞–∑—ã–≤–∞–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ª–∏–¥
  message += `<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${name}\n`;
  message += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`;

  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'html',
      }),
    });

    const data = await response.json();

    if (!data.ok) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç Telegram –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.error('Telegram API Error:', data.description);
    }

    return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram
  } catch (error) {
    console.error('Failed to send message to Telegram:', error);
    return { ok: false, description: 'Internal fetch error.' };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
export default async function handler(request, response) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS (–≤–∞–∂–Ω–æ –¥–ª—è –≤–µ–±-—Ñ–æ—Ä–º)
  response.setHeader('Access-Control-Allow-Credentials', true);
  response.setHeader('Access-Control-Allow-Origin', '*'); // –†–∞–∑—Ä–µ—à–∞–µ–º —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  response.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  response.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  // –ë—Ä–∞—É–∑–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS –ø–µ—Ä–µ–¥ POST
  if (request.method === 'OPTIONS') {
    return response.status(200).end();
  }

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Meta Webhook ---
  // –≠—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Meta
  if (request.method === 'GET') {
    const mode = request.query['hub.mode'];
    const token = request.query['hub.verify_token'];
    const challenge = request.query['hub.challenge'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—à–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    if (mode === 'subscribe' && token === process.env.META_VERIFY_TOKEN) {
      console.log('Webhook verified successfully!');
      return response.status(200).send(challenge);
    } else {
      console.error('Webhook verification failed.');
      return response.status(403).json({ message: 'Verification failed' });
    }
  }

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
  if (request.method === 'POST') {
    const body = request.body;
    // –°—Ä–∞–∑—É –ø–æ—Å–ª–µ const body = request.body;
    console.log('=== RAW BODY FROM META ===');
    console.log(JSON.stringify(body, null, 2));

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–æ–º –æ—Ç Meta
      if (body.object === 'page') {
        const entry = body.entry[0];
        const change = entry.changes[0];
        const leadData = change.value.field_data;
        console.log('=== ENTRY ===', JSON.stringify(entry, null, 2));
        console.log('=== CHANGE ===', JSON.stringify(change, null, 2));

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Meta
        const findField = (fieldName) =>
          leadData.find((f) => f.name === fieldName)?.values[0] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

        // Meta –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
        const fullName = findField('full_name');
        const firstName = findField('first_name');
        const lastName = findField('last_name');

        let name = fullName;
        if (
          name === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' &&
          (firstName !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' || lastName !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        ) {
          name = `${firstName} ${lastName}`.trim();
        }

        const phone = findField('phone_number');
        const formId = change.value.form_id;
        const source = `Meta Lead Ad (Form ID: ${formId})`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
        const telegramResult = await sendTelegramMessage(name, phone, source);

        if (telegramResult.ok) {
          return response
            .status(200)
            .json({ message: 'Meta lead processed successfully!' });
        } else {
          return response
            .status(500)
            .json({ message: 'Failed to send Meta lead to Telegram.' });
        }
      } else {
        // –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å –≤–∞—à–µ–≥–æ –ª–µ–Ω–¥–∏–Ω–≥–∞
        const { name, phone, productName } = body;

        if (!name || !phone) {
          return response
            .status(400)
            .json({ message: 'Name and phone are required.' });
        }

        const source = productName || '–õ–µ–Ω–¥–∏–Ω–≥'; // –ò—Å—Ç–æ—á–Ω–∏–∫ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–õ–µ–Ω–¥–∏–Ω–≥"

        const telegramResult = await sendTelegramMessage(name, phone, source);

        if (telegramResult.ok) {
          return response
            .status(200)
            .json({ message: 'Landing page lead processed successfully!' });
        } else {
          return response
            .status(500)
            .json({ message: 'Failed to send landing page lead to Telegram.' });
        }
      }
    } catch (error) {
      console.error('Error processing POST request:', error);
      return response.status(500).json({ message: 'Internal Server Error.' });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ GET, POST –∏–ª–∏ OPTIONS
  return response
    .status(405)
    .json({ message: `Method ${request.method} Not Allowed` });
}
